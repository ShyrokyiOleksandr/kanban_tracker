// Mocks generated by Mockito 5.4.4 from annotations
// in kanban_tracker/test/_helpers/mocks/mock_source.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dio/dio.dart' as _i3;
import 'package:kanban_tracker/data/app_services/dio/dio_client_service.dart'
    as _i14;
import 'package:kanban_tracker/data/data_sources/remote/remote_data_source.dart'
    as _i12;
import 'package:kanban_tracker/data/models/section_model.dart' as _i13;
import 'package:kanban_tracker/data/models/task_model.dart' as _i2;
import 'package:kanban_tracker/domain/entities/section_entity.dart' as _i6;
import 'package:kanban_tracker/domain/entities/task_entity.dart' as _i9;
import 'package:kanban_tracker/domain/errors/failure.dart' as _i7;
import 'package:kanban_tracker/domain/i_repositories/i_section_repository.dart'
    as _i4;
import 'package:kanban_tracker/domain/i_repositories/i_task_repository.dart'
    as _i8;
import 'package:kanban_tracker/domain/use_cases/sections/get_all_sections_use_case.dart'
    as _i10;
import 'package:kanban_tracker/domain/use_cases/tasks/get_all_tasks_use_case.dart'
    as _i11;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTaskModel_0 extends _i1.SmartFake implements _i2.TaskModel {
  _FakeTaskModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDio_1 extends _i1.SmartFake implements _i3.Dio {
  _FakeDio_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ISectionRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockISectionRepository extends _i1.Mock
    implements _i4.ISectionRepository {
  MockISectionRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<(List<_i6.SectionEntity>?, _i7.Failure?)> getAllSections() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllSections,
          [],
        ),
        returnValue: _i5.Future<(List<_i6.SectionEntity>?, _i7.Failure?)>.value(
            (null, null)),
      ) as _i5.Future<(List<_i6.SectionEntity>?, _i7.Failure?)>);
}

/// A class which mocks [ITaskRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockITaskRepository extends _i1.Mock implements _i8.ITaskRepository {
  MockITaskRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<(List<_i9.TaskEntity>?, _i7.Failure?)> getAllTasks() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllTasks,
          [],
        ),
        returnValue: _i5.Future<(List<_i9.TaskEntity>?, _i7.Failure?)>.value(
            (null, null)),
      ) as _i5.Future<(List<_i9.TaskEntity>?, _i7.Failure?)>);

  @override
  _i5.Future<(_i9.TaskEntity?, _i7.Failure?)> createTask(
          {required _i9.TaskEntity? task}) =>
      (super.noSuchMethod(
        Invocation.method(
          #createTask,
          [],
          {#task: task},
        ),
        returnValue:
            _i5.Future<(_i9.TaskEntity?, _i7.Failure?)>.value((null, null)),
      ) as _i5.Future<(_i9.TaskEntity?, _i7.Failure?)>);
}

/// A class which mocks [GetAllSectionsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAllSectionsUseCase extends _i1.Mock
    implements _i10.GetAllSectionsUseCase {
  @override
  _i5.Future<(List<_i6.SectionEntity>?, _i7.Failure?)> execute() =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
        ),
        returnValue: _i5.Future<(List<_i6.SectionEntity>?, _i7.Failure?)>.value(
            (null, null)),
        returnValueForMissingStub:
            _i5.Future<(List<_i6.SectionEntity>?, _i7.Failure?)>.value(
                (null, null)),
      ) as _i5.Future<(List<_i6.SectionEntity>?, _i7.Failure?)>);
}

/// A class which mocks [GetAllTasksUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAllTasksUseCase extends _i1.Mock
    implements _i11.GetAllTasksUseCase {
  @override
  _i5.Future<(List<_i9.TaskEntity>?, _i7.Failure?)> execute() =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
        ),
        returnValue: _i5.Future<(List<_i9.TaskEntity>?, _i7.Failure?)>.value(
            (null, null)),
        returnValueForMissingStub:
            _i5.Future<(List<_i9.TaskEntity>?, _i7.Failure?)>.value(
                (null, null)),
      ) as _i5.Future<(List<_i9.TaskEntity>?, _i7.Failure?)>);
}

/// A class which mocks [RemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoteDataSource extends _i1.Mock implements _i12.RemoteDataSource {
  @override
  _i5.Future<List<_i13.SectionModel>> getAllSections() => (super.noSuchMethod(
        Invocation.method(
          #getAllSections,
          [],
        ),
        returnValue:
            _i5.Future<List<_i13.SectionModel>>.value(<_i13.SectionModel>[]),
        returnValueForMissingStub:
            _i5.Future<List<_i13.SectionModel>>.value(<_i13.SectionModel>[]),
      ) as _i5.Future<List<_i13.SectionModel>>);

  @override
  _i5.Future<List<_i2.TaskModel>> getAllTasks() => (super.noSuchMethod(
        Invocation.method(
          #getAllTasks,
          [],
        ),
        returnValue: _i5.Future<List<_i2.TaskModel>>.value(<_i2.TaskModel>[]),
        returnValueForMissingStub:
            _i5.Future<List<_i2.TaskModel>>.value(<_i2.TaskModel>[]),
      ) as _i5.Future<List<_i2.TaskModel>>);

  @override
  _i5.Future<_i2.TaskModel> createTask({required _i9.TaskEntity? task}) =>
      (super.noSuchMethod(
        Invocation.method(
          #createTask,
          [],
          {#task: task},
        ),
        returnValue: _i5.Future<_i2.TaskModel>.value(_FakeTaskModel_0(
          this,
          Invocation.method(
            #createTask,
            [],
            {#task: task},
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.TaskModel>.value(_FakeTaskModel_0(
          this,
          Invocation.method(
            #createTask,
            [],
            {#task: task},
          ),
        )),
      ) as _i5.Future<_i2.TaskModel>);
}

/// A class which mocks [DioClientService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDioClientService extends _i1.Mock implements _i14.DioClientService {
  MockDioClientService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Dio get dio => (super.noSuchMethod(
        Invocation.getter(#dio),
        returnValue: _FakeDio_1(
          this,
          Invocation.getter(#dio),
        ),
      ) as _i3.Dio);
}
